---
title: "STATS506_HW2"
format:
  html:
    embed-resources: true
editor: visual
aurthor: Xuchen Liu
---

Github: https://github.com/xliu50/STATS506_Homework

## **Problem 1 - Dice Game**

### Part (a)

Version 1

```{r}
play_dice_1 <- function(n) {
  total <- 0
  for (i in 1:n) {
    roll <- sample(1:6, 1)
    if (roll %% 2 == 0) {
      total <- total + roll
    }
  }
  total - (2 * n) 
}

```

Version 2

```{r}
play_dice_2 <- function(n) {
  rolls <- sample(1:6, n, replace = TRUE)
  wins <- rolls[rolls %% 2 == 0]
  total <- sum(wins)
  total - (2 * n) 
}

```

Version 3

```{r}
play_dice_3 <- function(n) {
  rolls <- table(sample(1:6, n, replace = TRUE))
  target_number <- c(2, 4, 6)
  target_indices <- as.integer(names(rolls)) %in% target_number
  
  total <- sum(as.integer(names(rolls)) * rolls * target_indices)
  total - (2 * n) 
}
```

Version 4

```{r}
play_dice_4 <- function(n) {
  rolls <- sample(1:6, n, replace = TRUE)
  winnings <- sapply(rolls, function(roll) if (roll %% 2 == 0) roll else 0)
  total <- sum(winnings)
  total - (2 * n)
}
```

### Part (b)

```{r}
n1 <- 3
n2 <- 500
n3 <- 3000
#Version 1 test
cat("Version 1 (3 rolls): ", play_dice_1(n1), "\n")
cat("Version 1 (500 rolls): ", play_dice_1(n2), "\n")
cat("Version 1 (3000 rolls): ", play_dice_1(n3), "\n")

cat("Version 2 (3 rolls): ", play_dice_2(n1), "\n")
cat("Version 2 (500 rolls): ", play_dice_2(n2), "\n")
cat("Version 2 (3000 rolls): ", play_dice_2(n3), "\n")

cat("Version 3 (3 rolls): ", play_dice_3(n1), "\n")
cat("Version 3 (500 rolls): ", play_dice_3(n2), "\n")
cat("Version 3 (3000 rolls): ", play_dice_3(n3), "\n")

cat("Version 4 (3 rolls): ", play_dice_4(n1), "\n")
cat("Version 4 (500 rolls): ", play_dice_4(n2), "\n")
cat("Version 4 (3000 rolls): ", play_dice_4(n3), "\n")
cat("\n")

```

Answer: Based on the results, each function works.

### Part (c)

```{r}
set.seed(506)

n1 <- 3
n3 <- 3000
#Version 1 test
cat("Version 1 (3 rolls): ", play_dice_1(n1), "\n")
cat("Version 1 (3000 rolls): ", play_dice_1(n3), "\n")

cat("Version 2 (3 rolls): ", play_dice_2(n1), "\n")
cat("Version 2 (3000 rolls): ", play_dice_2(n3), "\n")

cat("Version 3 (3 rolls): ", play_dice_3(n1), "\n")
cat("Version 3 (3000 rolls): ", play_dice_3(n3), "\n")

cat("Version 4 (3 rolls): ", play_dice_4(n1), "\n")
cat("Version 4 (3000 rolls): ", play_dice_4(n3), "\n")

```

### Part (d)

```{r}
library(microbenchmark)
```

```{r}
n_low <- 100
n_large <- 10000

# Version 1
microbenchmark(play_dice_1(n_low))
microbenchmark(play_dice_1(n_large))
```

```{r}
# Version 2
microbenchmark(play_dice_2(n_low))
microbenchmark(play_dice_2(n_large))
```

```{r}
# Version 3
microbenchmark(play_dice_3(n_low))
microbenchmark(play_dice_3(n_large))
```

```{r}
# Version 4
microbenchmark(play_dice_4(n_low))
microbenchmark(play_dice_4(n_large))
```

Answer: Based on the results, the rankings of implementation speed according to the mean (from fastest to slowest) when n = 100 are as follows: version 3 (1.27) \> version 4 (8.52) \> version 2 (14.78) \> version 1 (61.16). This pattern also holds true when comparing the medians, and it extends to n = 10,000.

### Part (e)

```{r}
# Based on version 3
n_simul <- 10000
n <- 100
results <- numeric(n_simul)

for (i in 1:n_simul) {
  results[i] <- play_dice_3(n)
}

mean(results)
hist(results, main = "Histogram of wins", xlab = "wins")
t.test(results)

```

Answer: Based on the results, the mean total winnings are 0.1976, which is close to 0. According to the t-test, where the null hypothesis is that the mean is equal to 0 and the alternative hypothesis is that the mean is not equal to 0, the p-value is 0.3912, which is greater than 0.05. Therefore, we cannot reject the null hypothesis. Additionally, the histogram displays a normal distribution centered around 0.\
In conclusion, it's a fair game.

## **Problem 2 - Linear Regression**

```{r}
cars <- read.csv("cars.csv", header = TRUE)
```

### Part (a)

```{r}
new_colnames <- c("Height", "Length", "Width",'Driveline','Engine_Type','Hybrid_Engine','Number of Forward Gears','Treansmission','City_mpg','Fuel_Type','Highway_mpg','Classification','ID','Make','Model_Year','Year','Horsepower','Torque')
colnames(cars) <- new_colnames
```

### Part (b)

```{r}
cars <- cars[cars["Fuel_Type"] == "Gasoline",]
```

### Part (c)

```{r}
model1 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + factor(Year), data = cars)
summary(model1)
```

Answer: Based on the results, The highway MPG will increase 1 as Horsepower increase 0.0163556. In addition, the p-value of Horsepower, Torque, Height and Length are less than 0.05, which means these feature are significantly related to the highway mpg.

### Part (d)

```{r}
library(interactions)
library(ggplot2)
model2 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + Horsepower * Torque, data = cars)
summary(model2)
```

```{r}
interaction_data <- cars[,c("Highway_mpg", "Horsepower","Torque","Year")]
interaction_data <- interaction_data[interaction_data$Year == 2011,]

print(summary(interaction_data$Torque))
print(summary(interaction_data$Horsepower))
```

```{r}
filtered_data <- interaction_data[interaction_data$Torque %in% c(125, 300, 465), ]

interaction.plot(
  x.factor = filtered_data$Horsepower,
  trace.factor = filtered_data$Torque,
  response = filtered_data$Highway_mpg,
  type = "b",
  xlab = "Horsepower",
  ylab = "Highway MPG",
  trace.label = "Torque"
)
```

Answer: Based on the results from model2, we can see that the interaction between horsepower and torque is significant to the Highway_mpg. I choose three Torque (125, 300, 465) as test data, and based on the plot, we can see that when Torque = 300, the Highway MPG is increases faster than the other to circumstance.

### Part (e)

```{r}
cars$H_T <- cars$Horsepower * cars$Torque
selected_columns <- cars[, c("Horsepower", "Torque", "Height", "Length", "Width","H_T")]

matrix_data <- as.matrix(selected_columns)

X <- cbind(1, matrix_data)
Y <- cars$Highway_mpg

beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y

print(beta_hat)
```

The results are same as lm did prior.
