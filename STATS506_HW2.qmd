---
title: "STATS506_HW2"
format:
  html:
    embed-resources: true
editor: visual
aurthor: Xuchen Liu
---

Github: https://github.com/xliu50/STATS506_Homework

## **Problem 1 - Dice Game**

### Part (a)

Version 1

```{r}
play_dice_1 <- function(n) {
  total <- 0
  for (i in 1:n) {
    roll <- sample(1:6, 1) #Random choose the results
    if (roll %% 2 == 0) { #Decide if win or not 
      total <- total + roll #If win, calcualte the earn
    }
  }
  total <- total - (2 * n) #Minus cost for each run
  return(total)
}

```

Version 2

```{r}
play_dice_2 <- function(n) {
  rolls <- sample(1:6, n, replace = TRUE) #Random choose the results
  wins <- rolls[rolls %% 2 == 0] #Decide if win or not 
  total <- sum(wins) #If win, calcualte the earn
  total <- total - (2 * n) #Minus cost for each run
  return(total)
}

```

Version 3

```{r}
play_dice_3 <- function(n) {
  rolls <- table(sample(1:6, n, replace = TRUE)) #Random choose the results
  target_number <- c(2, 4, 6) 
  target_indices <- as.integer(names(rolls)) %in% target_number #Decide if win or not 
  
  total <- sum(as.integer(names(rolls)) * rolls * target_indices) #If win, calcualte the earn
  total <- total - (2 * n) #Minus cost for each run
  return(total)
}
```

Version 4

```{r}
play_dice_4 <- function(n) {
  rolls <- sample(1:6, n, replace = TRUE) #Random choose the results
  winnings <- sapply(rolls, function(roll) if (roll %% 2 == 0) roll else 0) #Decide if win or not
  total <- sum(winnings) #If win, calcualte the earn
  total <- total - (2 * n)  #Minus cost for each run
  return(total)
}
```

### Part (b)

```{r}
n1 <- 3
n3 <- 3000
#Version 1 test
cat("Version 1 (3 rolls): ", play_dice_1(n1), "\n")
cat("Version 1 (3000 rolls): ", play_dice_1(n3), "\n")

cat("Version 2 (3 rolls): ", play_dice_2(n1), "\n")
cat("Version 2 (3000 rolls): ", play_dice_2(n3), "\n")

cat("Version 3 (3 rolls): ", play_dice_3(n1), "\n")
cat("Version 3 (3000 rolls): ", play_dice_3(n3), "\n")

cat("Version 4 (3 rolls): ", play_dice_4(n1), "\n")
cat("Version 4 (3000 rolls): ", play_dice_4(n3), "\n")
cat("\n")

```

Answer: Based on the results, each function works.

### Part (c)

```{r}
n1 <- 3
n3 <- 3000
#Version 1 test
set.seed(506)
cat("Version 1 (3 rolls): ", play_dice_1(n1), "\n")
set.seed(506)
cat("Version 1 (3000 rolls): ", play_dice_1(n3), "\n")

set.seed(506)
cat("Version 2 (3 rolls): ", play_dice_2(n1), "\n")
set.seed(506)
cat("Version 2 (3000 rolls): ", play_dice_2(n3), "\n")

set.seed(506)
cat("Version 3 (3 rolls): ", play_dice_3(n1), "\n")
set.seed(506)
cat("Version 3 (3000 rolls): ", play_dice_3(n3), "\n")

set.seed(506)
cat("Version 4 (3 rolls): ", play_dice_4(n1), "\n")
set.seed(506)
cat("Version 4 (3000 rolls): ", play_dice_4(n3), "\n")

```

### Part (d)

```{r}
library(microbenchmark)
```

```{r}
n_low <- 100
n_large <- 10000

#Demonstrate the speed of the implementations of Version 1
microbenchmark(play_dice_1(n_low))
microbenchmark(play_dice_1(n_large))

#Demonstrate the speed of the implementations of Version 2
microbenchmark(play_dice_2(n_low))
microbenchmark(play_dice_2(n_large))

#Demonstrate the speed of the implementations of Version 3
microbenchmark(play_dice_3(n_low))
microbenchmark(play_dice_3(n_large))

#Demonstrate the speed of the implementations of Version 4
microbenchmark(play_dice_4(n_low))
microbenchmark(play_dice_4(n_large))
```

Answer: Based on the results, the rankings of implementation speed according to the mean (from fastest to slowest, in ) when n = 10 are as follows: version 2 (14.54) \> version 4 (93.213) \> version 3 (123.151) \> version(667.091). This pattern also holds true when comparing the medians, and when it extends to n = 10000

### Part (e)

```{r}
# Based on version 3
set.seed(506)
n_simul <- 10000
n <- 100
results <- numeric(n_simul)

for (i in 1:n_simul) {
  results[i] <- play_dice_3(n)
}

mean(results)
hist(results, main = "Histogram of wins", xlab = "wins") #Generate Histogram
t.test(results) #Do the t-test to check the p-value

```

Answer: Based on the results, the mean total winnings are 0.2758, which is close to 0. According to the t-test, where the null hypothesis is that the mean is equal to 0 and the alternative hypothesis is that the mean is not equal to 0, the p-value is 0.2367, which is greater than 0.05. Therefore, we cannot reject the null hypothesis. Additionally, the histogram displays a normal distribution centered around 0.\
In conclusion, it's a fair game.

## **Problem 2 - Linear Regression**

```{r}
cars <- read.csv("cars.csv", header = TRUE)
```

### Part (a)

```{r}
new_colnames <- c("Height", "Length", "Width",'Driveline','Engine_Type','Hybrid_Engine','Number of Forward Gears','Treansmission','City_mpg','Fuel_Type','Highway_mpg','Classification','ID','Make','Model_Year','Year','Horsepower','Torque')
colnames(cars) <- new_colnames
```

### Part (b)

```{r}
cars <- cars[cars["Fuel_Type"] == "Gasoline",]
```

### Part (c)

```{r}
#Build regression model
model1 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + factor(Year), data = cars)
summary(model1)
```

Answer: Based on the results, The highway MPG will increase 0.0163556 as Horsepower increase 1. In addition, the p-value of Horsepower, Torque and Height are less than 0.05, which means these feature are significantly related to the highway mpg.

### Part (d)

```{r}
library(ggplot2)
#Build regression model
model2 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + Horsepower * Torque + + factor(Year), data = cars)
summary(model2)
```

```{r}
#Filter the data
interaction_data <- cars[,c("Highway_mpg", "Horsepower","Torque","Year")]
interaction_data <- interaction_data[interaction_data$Year == 2011,]

print(summary(interaction_data$Torque))
print(summary(interaction_data$Horsepower))
```

```{r}
library(emmeans)
filtered_data <-  subset(cars, Torque %in% c(125, 300, 465))
filtered_data$Torque <- as.factor(filtered_data$Torque)
model3 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + Horsepower * Torque, data = filtered_data)

emmip(model3,Torque ~ Horsepower, at = list(Horsepower = c(100, 200, 300, 400, 500, 600)))
```

Answer: Based on the results from model2, we can see that the interaction between horsepower and torque is significant to the Highway_mpg. I choose three Torque (125, 300, 465) as test data, and based on the plot, we can see that when Torque = 300 or 125, the Highway_mpg is increases as Horsepower increases, and the Highway_mpg increase faster when Torque = 300. In addition, when Torque = 465, The Highway_mpg will slightly decrease as Horsepower increase.

### Part (e)

```{r}
#Create matrix
cars$H_T <- cars$Horsepower * cars$Torque
selected_columns <- cars[, c("Horsepower", "Torque", "Height", "Length", "Width","H_T")]

matrix_data <- as.matrix(selected_columns)

X <- cbind(1, matrix_data)
Y <- cars$Highway_mpg

#Calculate the coeffience
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y

print(beta_hat)
```

The results are same as lm did prior.

## **Problem 3 - Stata**

### Part (a)

```` stata
```stata

. do "C:\Users\AAAAAA~1\AppData\Local\Temp\STD4890_000000.tmp"

. cd "C:\Users\AAAAAAAAA\Desktop\STATS 506\HW"
. import delimited "cars.csv"
. 
. rename dimensionsheight Height

. rename dimensionslength Length

. rename dimensionswidth Width

. rename engineinformationdriveline Driveline

. rename engineinformationenginetype Engine_Type

. rename engineinformationhybrid Hybrid_Engine

. rename engineinformationnumberofforward Number_of_Forward_Gears

. rename engineinformationtransmission Treansmission

. rename fuelinformationcitympg City_mpg

. rename fuelinformationfueltype Fuel_Type

. rename fuelinformationhighwaympg Highway_mpg

. rename identificationclassification Classification

. rename identificationid ID

. rename identificationmake Make

. rename identificationmodelyear Model_Year

. rename identificationyear Year

. rename engineinformationenginestatistic Horsepower

. rename v18 Torque

. 
. 
. 
end of do-file
```
````

### Part (b)

``` stata
 keep if Fuel_Type == "Gasoline"
(485 observations deleted)
```

### Part (c)

``` stata
. do "C:\Users\AAAAAA~1\AppData\Local\Temp\STD3364_000000.tmp"

. regress Highway_mpg c.Horsepower c.Torque c.Height c.Length c.Width i.Y
> ear

      Source |       SS           df       MS      Number of obs   =     
> 4,591
-------------+----------------------------------   F(8, 4582)      =    4
> 13.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0
> .0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0
> .4192
-------------+----------------------------------   Adj R-squared   =    0
> .4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4
> .6024

-------------------------------------------------------------------------
> -----
 Highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. inte
> rval]
-------------+-----------------------------------------------------------
> -----
  Horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .
> 02082
      Torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.04
> 64236
      Height |   .0099079   .0011267     8.79   0.000      .007699    .01
> 21168
      Length |    .001729   .0008836     1.96   0.050    -3.36e-06    .00
> 34613
       Width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .00
> 14388
             |
        Year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .87
> 29342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.4
> 95808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.6
> 38031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33
> .7093
-------------------------------------------------------------------------
> -----

. 
end of do-file

. 
```

Answer: Based on the results, The highway MPG will increase 1 as Horsepower increase 0.016. In addition, the p-value of Horsepower, Torque, Height and Length are less than 0.05, which means these feature are significantly related to the highway mpg and the results are corresponding to the results from R

### Part (d)

``` stata
keep if Torque == 125 | Torque == 300 | Torque == 465
```

``` stata

. regress Highway_mpg c.Horsepower i.Torque c.Horsepower##i.Torque c.Heig
> ht c.Length c.Width i.Year
note: Horsepower omitted because of collinearity.

      Source |       SS           df       MS      Number of obs   =     
>    93
-------------+----------------------------------   F(10, 82)       =     
> 81.57
       Model |  1852.95615        10  185.295615   Prob > F        =    0
> .0000
    Residual |  186.269661        82  2.27158124   R-squared       =    0
> .9087
-------------+----------------------------------   Adj R-squared   =    0
> .8975
       Total |  2039.22581        92  22.1654979   Root MSE        =    1
> .5072

-------------------------------------------------------------------------
> -----
 Highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. inte
> rval]
-------------+-----------------------------------------------------------
> -----
  Horsepower |   .1572461   .0382836     4.11   0.000     .0810878    .23
> 34043
             |
      Torque |
        300  |  -113.3484   38.05794    -2.98   0.004    -189.0578   -37.
> 63903
        465  |  -5.888713   18.70873    -0.31   0.754    -43.10635    31.
> 32892
             |
  Horsepower |          0  (omitted)
             |
      Torque#|
c.Horsepower |
        300  |   .2633117   .1319692     2.00   0.049      .000783    .52
> 58404
        465  |  -.1370639   .0555372    -2.47   0.016     -.247545   -.02
> 65829
             |
      Height |  -.0104702   .0038569    -2.71   0.008    -.0181427   -.00
> 27976
      Length |  -.0056861   .0021607    -2.63   0.010    -.0099845   -.00
> 13877
       Width |  -.0074948   .0026444    -2.83   0.006    -.0127554   -.00
> 22342
             |
        Year |
       2011  |   1.003464   .4036532     2.49   0.015     .2004695    1.8
> 06459
       2012  |   2.083896   .5120097     4.07   0.000     1.065346    3.1
> 02446
             |
       _cons |    16.0139   4.835223     3.31   0.001     6.395097     25
> .6327
-------------------------------------------------------------------------
> -----

. 
. 
. 
. margins Torque, at(Horsepower = (200(50)600))

Predictive margins                                          Number of obs
>  = 93
Model VCE: OLS

Expression: Linear prediction, predict()
1._at: Horsepower = 200
2._at: Horsepower = 250
3._at: Horsepower = 300
4._at: Horsepower = 350
5._at: Horsepower = 400
6._at: Horsepower = 450
7._at: Horsepower = 500
8._at: Horsepower = 550
9._at: Horsepower = 600

-------------------------------------------------------------------------
> -----
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. inte
> rval]
-------------+-----------------------------------------------------------
> -----
  _at#Torque |
      1 125  |    45.0002   2.811265    16.01   0.000      39.4077     50
> .5927
      1 300  |  -15.68585   12.52816    -1.25   0.214    -40.60835    9.2
> 36645
      1 465  |    11.6987   10.47667     1.12   0.267    -9.142738    32.
> 54014
      2 125  |   52.86251   4.711496    11.22   0.000     43.48984    62.
> 23517
      2 300  |   5.342037   6.248235     0.85   0.395    -7.087693    17.
> 77177
      2 465  |   12.70781   8.764094     1.45   0.151    -4.726766    30.
> 14238
      3 125  |   60.72481    6.61977     9.17   0.000     47.55598    73.
> 89364
      3 300  |   26.36993   .2186819   120.59   0.000      25.9349    26.
> 80495
      3 465  |   13.71692    7.05307     1.94   0.055    -.3138864    27.
> 74772
      4 125  |   68.58712   8.530689     8.04   0.000     51.61686    85.
> 55737
      4 300  |   47.39782   6.322728     7.50   0.000     34.81989    59.
> 97574
      4 465  |   14.72602   5.345094     2.76   0.007     4.092928    25.
> 35912
      5 125  |   76.44942    10.4428     7.32   0.000     55.67536    97.
> 22348
      5 300  |    68.4257   12.60268     5.43   0.000     43.35495    93.
> 49646
      5 465  |   15.73513   3.644455     4.32   0.000     8.485147    22.
> 98511
      6 125  |   84.31172   12.35556     6.82   0.000     59.73259    108
> .8909
      6 300  |   89.45359   18.88386     4.74   0.000     51.88758    127
> .0196
      6 465  |   16.74424   1.970246     8.50   0.000     12.82479    20.
> 66368
      7 125  |   92.17403   14.26869     6.46   0.000     63.78905     12
> 0.559
      7 300  |   110.4815   25.16534     4.39   0.000     60.41961    160
> .5434
      7 465  |   17.75334   .6078379    29.21   0.000     16.54416    18.
> 96253
      8 125  |   100.0363   16.18207     6.18   0.000     67.84503    132
> .2276
      8 300  |   131.5094   31.44694     4.18   0.000     68.95139    194
> .0674
      8 465  |   18.76245    1.65676    11.32   0.000     15.46663    22.
> 05827
      9 125  |   107.8986   18.09563     5.96   0.000     71.90067    143
> .8966
      9 300  |   152.5373    37.7286     4.04   0.000     77.48305    227
> .5915
      9 465  |   19.77156   3.317835     5.96   0.000     13.17133    26.
> 37179
-------------------------------------------------------------------------
> -----

. 
. marginsplot, xtitle(Horsepower) ytitle("Predicted Highway MPG")

Variables that uniquely identify margins: Horsepower Torque

. 
end of do-file

. 
```

![](Interaction_plot.png) Answer: Based on the results from model2, we can see that the interaction between horsepower and torque is significant to the Highway_mpg. I choose three Torque (125, 300, 465) as test data, and based on the plot, we can see that when Torque = 300 or 125, the Highway_mpg is increases as Horsepower increases, and the Highway_mpg increase faster when Torque = 300. In addition, when Torque = 465, The Highway_mpg will slightly decrease as Horsepower increase. These results are same to the results get from R.
