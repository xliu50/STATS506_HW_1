---
title: "STATS506_HW2"
format:
  html:
    embed-resources: true
editor: visual
aurthor: Xuchen Liu
---

Github: https://github.com/xliu50/STATS506_Homework

## **Problem 1 - Dice Game**

### Part (a)

Version 1

```{r}
play_dice_1 <- function(n) {
  total <- 0
  for (i in 1:n) {
    roll <- sample(1:6, 1) #Random choose the results
    if (roll %% 2 == 0) { #Decide if win or not 
      total <- total + roll #If win, calcualte the earn
    }
  }
  total <- total - (2 * n) #Minus cost for each run
  return(total)
}

```

Version 2

```{r}
play_dice_2 <- function(n) {
  rolls <- sample(1:6, n, replace = TRUE) #Random choose the results
  wins <- rolls[rolls %% 2 == 0] #Decide if win or not 
  total <- sum(wins) #If win, calcualte the earn
  total <- total - (2 * n) #Minus cost for each run
  return(total)
}

```

Version 3

```{r}
play_dice_3 <- function(n) {
  rolls <- table(sample(1:6, n, replace = TRUE)) #Random choose the results
  target_number <- c(2, 4, 6) 
  target_indices <- as.integer(names(rolls)) %in% target_number #Decide if win or not 
  
  total <- sum(as.integer(names(rolls)) * rolls * target_indices) #If win, calcualte the earn
  total <- total - (2 * n) #Minus cost for each run
  return(total)
}
```

Version 4

```{r}
play_dice_4 <- function(n) {
  rolls <- sample(1:6, n, replace = TRUE) #Random choose the results
  winnings <- sapply(rolls, function(roll) if (roll %% 2 == 0) roll else 0) #Decide if win or not
  total <- sum(winnings) #If win, calcualte the earn
  total <- total - (2 * n)  #Minus cost for each run
  return(total)
}
```

### Part (b)

```{r}
n1 <- 3
n3 <- 3000
#Version 1 test
cat("Version 1 (3 rolls): ", play_dice_1(n1), "\n")
cat("Version 1 (3000 rolls): ", play_dice_1(n3), "\n")

cat("Version 2 (3 rolls): ", play_dice_2(n1), "\n")
cat("Version 2 (3000 rolls): ", play_dice_2(n3), "\n")

cat("Version 3 (3 rolls): ", play_dice_3(n1), "\n")
cat("Version 3 (3000 rolls): ", play_dice_3(n3), "\n")

cat("Version 4 (3 rolls): ", play_dice_4(n1), "\n")
cat("Version 4 (3000 rolls): ", play_dice_4(n3), "\n")
cat("\n")

```

Answer: Based on the results, each function works.

### Part (c)

```{r}
n1 <- 3
n3 <- 3000
#Version 1 test
set.seed(506)
cat("Version 1 (3 rolls): ", play_dice_1(n1), "\n")
set.seed(506)
cat("Version 1 (3000 rolls): ", play_dice_1(n3), "\n")

set.seed(506)
cat("Version 2 (3 rolls): ", play_dice_2(n1), "\n")
set.seed(506)
cat("Version 2 (3000 rolls): ", play_dice_2(n3), "\n")

set.seed(506)
cat("Version 3 (3 rolls): ", play_dice_3(n1), "\n")
set.seed(506)
cat("Version 3 (3000 rolls): ", play_dice_3(n3), "\n")

set.seed(506)
cat("Version 4 (3 rolls): ", play_dice_4(n1), "\n")
set.seed(506)
cat("Version 4 (3000 rolls): ", play_dice_4(n3), "\n")

```

### Part (d)

```{r}
library(microbenchmark)
```

```{r}
n_low <- 100
n_large <- 10000

#Demonstrate the speed of the implementations of Version 1
microbenchmark(play_dice_1(n_low))
microbenchmark(play_dice_1(n_large))

#Demonstrate the speed of the implementations of Version 2
microbenchmark(play_dice_2(n_low))
microbenchmark(play_dice_2(n_large))

#Demonstrate the speed of the implementations of Version 3
microbenchmark(play_dice_3(n_low))
microbenchmark(play_dice_3(n_large))

#Demonstrate the speed of the implementations of Version 4
microbenchmark(play_dice_4(n_low))
microbenchmark(play_dice_4(n_large))
```

Answer: Based on the results, the rankings of implementation speed according to the mean (from fastest to slowest, in ) when n = 10 are as follows: version 2 (14.54) \> version 4 (93.213) \> version 3 (123.151) \> version(667.091). This pattern also holds true when comparing the medians, and when it extends to n = 10000

### Part (e)

```{r}
# Based on version 3
set.seed(506)
n_simul <- 10000
n <- 100
results <- numeric(n_simul)

for (i in 1:n_simul) {
  results[i] <- play_dice_3(n)
}

mean(results)
hist(results, main = "Histogram of wins", xlab = "wins") #Generate Histogram
t.test(results) #Do the t-test to check the p-value

```

Answer: Based on the results, the mean total winnings are 0.2758, which is close to 0. According to the t-test, where the null hypothesis is that the mean is equal to 0 and the alternative hypothesis is that the mean is not equal to 0, the p-value is 0.2367, which is greater than 0.05. Therefore, we cannot reject the null hypothesis. Additionally, the histogram displays a normal distribution centered around 0.\
In conclusion, it's a fair game.

## **Problem 2 - Linear Regression**

```{r}
cars <- read.csv("cars.csv", header = TRUE)
```

### Part (a)

```{r}
new_colnames <- c("Height", "Length", "Width",'Driveline','Engine_Type','Hybrid_Engine','Number of Forward Gears','Treansmission','City_mpg','Fuel_Type','Highway_mpg','Classification','ID','Make','Model_Year','Year','Horsepower','Torque')
colnames(cars) <- new_colnames
```

### Part (b)

```{r}
cars <- cars[cars["Fuel_Type"] == "Gasoline",]
```

### Part (c)

```{r}
#Build regression model
model1 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + factor(Year), data = cars)
summary(model1)
```

Answer: Based on the results, The highway MPG will increase 1 as Horsepower increase 0.0163556. In addition, the p-value of Horsepower, Torque and Height are less than 0.05, which means these feature are significantly related to the highway mpg.

### Part (d)

```{r}
library(interactions)
library(ggplot2)
#Build regression model
model2 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + Horsepower * Torque, data = cars)
summary(model2)
```

```{r}
#Filter the data
interaction_data <- cars[,c("Highway_mpg", "Horsepower","Torque","Year")]
interaction_data <- interaction_data[interaction_data$Year == 2011,]

print(summary(interaction_data$Torque))
print(summary(interaction_data$Horsepower))
```

```{r}
library(emmeans)
filtered_data <-  subset(cars, Torque %in% c(125, 300, 465))
filtered_data$Torque <- as.factor(filtered_data$Torque)
model3 <- lm(Highway_mpg ~ Horsepower + Torque + Height + Length + Width + Horsepower * Torque, data = filtered_data)

emmip(model3,Torque ~ Horsepower, at = list(Horsepower = c(100, 200, 300, 400, 500, 600)))
```

Answer: Based on the results from model2, we can see that the interaction between horsepower and torque is significant to the Highway_mpg. I choose three Torque (125, 300, 465) as test data, and based on the plot, we can see that when Torque = 300 or 125, the Highway_mpg is increases as Horsepower increases, and the Highway_mpg increase faster when Torque = 300. In addition, when Torque = 465, The Highway_mpg will slightly decrease as Horsepower increase.

### Part (e)

```{r}
#Create matrix
cars$H_T <- cars$Horsepower * cars$Torque
selected_columns <- cars[, c("Horsepower", "Torque", "Height", "Length", "Width","H_T")]

matrix_data <- as.matrix(selected_columns)

X <- cbind(1, matrix_data)
Y <- cars$Highway_mpg

#Calculate the coeffience
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y

print(beta_hat)
```

The results are same as lm did prior.

## **Problem 3 - Stata**

### Part (a)

```` stata
```stata

. do "C:\Users\AAAAAA~1\AppData\Local\Temp\STD4890_000000.tmp"

. cd "C:\Users\AAAAAAAAA\Desktop\STATS 506\HW"
. import delimited "cars.csv"
. 
. rename dimensionsheight Height

. rename dimensionslength Length

. rename dimensionswidth Width

. rename engineinformationdriveline Driveline

. rename engineinformationenginetype Engine_Type

. rename engineinformationhybrid Hybrid_Engine

. rename engineinformationnumberofforward Number_of_Forward_Gears

. rename engineinformationtransmission Treansmission

. rename fuelinformationcitympg City_mpg

. rename fuelinformationfueltype Fuel_Type

. rename fuelinformationhighwaympg Highway_mpg

. rename identificationclassification Classification

. rename identificationid ID

. rename identificationmake Make

. rename identificationmodelyear Model_Year

. rename identificationyear Year

. rename engineinformationenginestatistic Horsepower

. rename v18 Torque

. 
. 
. 
end of do-file
```
````

### Part (b)

``` stata
 keep if Fuel_Type == "Gasoline"
(485 observations deleted)
```

### Part (c)

``` stata
. do "C:\Users\AAAAAA~1\AppData\Local\Temp\STD3364_000000.tmp"

. regress Highway_mpg c.Horsepower c.Torque c.Height c.Length c.Width i.Y
> ear

      Source |       SS           df       MS      Number of obs   =     
> 4,591
-------------+----------------------------------   F(8, 4582)      =    4
> 13.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0
> .0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0
> .4192
-------------+----------------------------------   Adj R-squared   =    0
> .4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4
> .6024

-------------------------------------------------------------------------
> -----
 Highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. inte
> rval]
-------------+-----------------------------------------------------------
> -----
  Horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .
> 02082
      Torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.04
> 64236
      Height |   .0099079   .0011267     8.79   0.000      .007699    .01
> 21168
      Length |    .001729   .0008836     1.96   0.050    -3.36e-06    .00
> 34613
       Width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .00
> 14388
             |
        Year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .87
> 29342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.4
> 95808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.6
> 38031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33
> .7093
-------------------------------------------------------------------------
> -----

. 
end of do-file

. 
```

Answer: Based on the results, The highway MPG will increase 1 as Horsepower increase 0.016. In addition, the p-value of Horsepower, Torque, Height and Length are less than 0.05, which means these feature are significantly related to the highway mpg and the results are corresponding to the results from R

### Part (d)

``` stata

. do "C:\Users\AAAAAA~1\AppData\Local\Temp\STD4890_000000.tmp"

. regress Highway_mpg c.Horsepower##i.Torque c.Height c.Length c.Width

      Source |       SS           df       MS      Number of obs   =     
>    93
-------------+----------------------------------   F(8, 84)        =     
> 84.90
       Model |  1814.77897         8  226.847371   Prob > F        =    0
> .0000
    Residual |  224.446835        84  2.67198613   R-squared       =    0
> .8899
-------------+----------------------------------   Adj R-squared   =    0
> .8795
       Total |  2039.22581        92  22.1654979   Root MSE        =    1
> .6346

-------------------------------------------------------------------------
> -----
 Highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. inte
> rval]
-------------+-----------------------------------------------------------
> -----
  Horsepower |   .2070757   .0374748     5.53   0.000     .1325529    .28
> 15985
             |
      Torque |
        300  |  -116.3695   41.23258    -2.82   0.006     -198.365   -34.
> 37396
        465  |   18.05331   19.02879     0.95   0.345    -19.78753    55.
> 89415
             |
      Torque#|
c.Horsepower |
        300  |    .243268   .1424745     1.71   0.091    -.0400582    .52
> 65942
        465  |  -.2227229   .0537516    -4.14   0.000     -.329614   -.11
> 58319
             |
      Height |  -.0096222   .0041685    -2.31   0.023    -.0179117   -.00
> 13326
      Length |  -.0091535   .0021416    -4.27   0.000    -.0134124   -.00
> 48947
       Width |   -.007384   .0028123    -2.63   0.010    -.0129766   -.00
> 17914
       _cons |   11.19312   4.741956     2.36   0.021     1.763216    20.
> 62302
-------------------------------------------------------------------------
> -----

. 
. keep if Torque == 125 | Torque == 300 | Torque == 465
(0 observations deleted)

. 
. margins Torque, at(Horsepower = (200(50)600))

Predictive margins                                          Number of obs
>  = 93
Model VCE: OLS

Expression: Linear prediction, predict()
1._at: Horsepower = 200
2._at: Horsepower = 250
3._at: Horsepower = 300
4._at: Horsepower = 350
5._at: Horsepower = 400
6._at: Horsepower = 450
7._at: Horsepower = 500
8._at: Horsepower = 550
9._at: Horsepower = 600

-------------------------------------------------------------------------
> -----
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. inte
> rval]
-------------+-----------------------------------------------------------
> -----
  _at#Torque |
      1 125  |   48.92618      2.738    17.87   0.000     43.48137      5
> 4.371
      1 300  |  -18.78968    13.5626    -1.39   0.170     -45.7604    8.1
> 81045
      1 465  |   22.43491   10.96252     2.05   0.044     .6347324    44.
> 23508
      2 125  |   59.27997   4.595414    12.90   0.000     50.14148    68.
> 41845
      2 300  |    3.72751   6.763067     0.55   0.583     -9.72159    17.
> 17661
      2 465  |   21.65255   9.172568     2.36   0.021     3.411888     39
> .8932
      3 125  |   69.63375   6.462262    10.78   0.000     56.78284    82.
> 48467
      3 300  |    26.2447   .2348082   111.77   0.000     25.77775    26.
> 71164
      3 465  |   20.87018   7.384342     2.83   0.006      6.18561    35.
> 55476
      4 125  |   79.98754   8.332205     9.60   0.000     63.41804    96.
> 55704
      4 300  |   48.76188     6.8478     7.12   0.000     35.14428    62.
> 37948
      4 465  |   20.08782   5.599497     3.59   0.001     8.952608    31.
> 22304
      5 125  |   90.34133   10.20354     8.85   0.000     70.05047    110
> .6322
      5 300  |   71.27907   13.64737     5.22   0.000     44.13978    98.
> 41836
      5 465  |   19.30546   3.822774     5.05   0.000     11.70346    26.
> 90747
      6 125  |   100.6951   12.07562     8.34   0.000     76.68141    124
> .7088
      6 300  |   93.79626   20.44823     4.59   0.000      53.1327    134
> .4598
      6 465  |    18.5231   2.075135     8.93   0.000     14.39647    22.
> 64973
      7 125  |   111.0489   13.94815     7.96   0.000     83.31147    138
> .7863
      7 300  |   116.3134   27.24942     4.27   0.000     62.12498    170
> .5019
      7 465  |   17.74074   .6573695    26.99   0.000     16.43349    19.
> 04799
      8 125  |   121.4027   15.82097     7.67   0.000     89.94096    152
> .8644
      8 300  |   138.8306   34.05074     4.08   0.000       71.117    206
> .5443
      8 465  |   16.95838   1.729579     9.80   0.000     13.51892    20.
> 39784
      9 125  |   131.7565   17.69398     7.45   0.000     96.57006    166
> .9429
      9 300  |   161.3478   40.85212     3.95   0.000     80.10889    242
> .5867
      9 465  |   16.17602   3.461808     4.67   0.000     9.291832     23
> .0602
-------------------------------------------------------------------------
> -----

. 
. marginsplot, xtitle(Horsepower) ytitle("Predicted Highway MPG")

Variables that uniquely identify margins: Horsepower Torque

. 
end of do-file

. 
```

![](Interaction_plot.png)
Answer: Based on the results from model2, we can see that the interaction between horsepower and torque is significant to the Highway_mpg. I choose three Torque (125, 300, 465) as test data, and based on the plot, we can see that when Torque = 300 or 125, the Highway_mpg is increases as Horsepower increases, and the Highway_mpg increase faster when Torque = 300. In addition, when Torque = 465, The Highway_mpg will slightly decrease as Horsepower increase. These results are same to the results get from R.
